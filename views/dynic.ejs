<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Dynamic Form</title>
</head>
<body>
  <h1>Form for <%= schema.name %></h1>
  <form action="/submit/<%= schema._id %>" method="POST">
    <% schema.fields.forEach((field, fieldIndex) => { %>
      <div class="field">
        <label for="<%= field.fieldName %>"><%= field.fieldName %></label>
        <% if (field.fieldType === 'text' || field.fieldType === 'number' || field.fieldType === 'decimal') { %>
          <input type="<%= field.fieldType === 'decimal' ? 'number' : field.fieldType %>" 
                 id="<%= field.fieldName %>" 
                 name="<%= field.fieldName %>" 
                 <%= field.fieldType === 'decimal' ? 'step="any"' : '' %>
                 <%= field.required ? 'required' : '' %>>
        <% } else if (field.fieldType === 'select') { %>
          <select id="<%= field.fieldName %>" name="<%= field.fieldName %>" <%= field.required ? 'required' : '' %>>
            <% field.options.forEach(option => { %>
              <% if (option) { %>
                <option value="<%= option %>"><%= option %></option>
              <% } %>
            <% }); %>
          </select>
        <% } else if (field.fieldType === 'checkbox') { %>
          <% field.options.forEach(option => { %>
            <% if (option) { %>
              <div>
                <input type="checkbox" id="<%= field.fieldName %>_<%= option %>" 
                       name="<%= field.fieldName %>[]"
                       value="<%= option %>"> 
                <label for="<%= field.fieldName %>_<%= option %>"><%= option %></label>
              </div>
            <% } %>
          <% }); %>
        <% } else if (field.fieldType === 'date') { %>
          <input type="date" id="<%= field.fieldName %>" name="<%= field.fieldName %>" <%= field.required ? 'required' : '' %>>
        <% } else if (field.fieldType === 'time') { %>
          <input type="time" id="<%= field.fieldName %>" name="<%= field.fieldName %>" <%= field.required ? 'required' : '' %>>
        <% } else if (field.fieldType === 'boolean') { %>
          <div>
            <input type="radio" id="<%= field.fieldName %>True" 
                   name="<%= field.fieldName %>" value="true" <%= field.required ? 'required' : '' %>>
            <label for="<%= field.fieldName %>True">True</label>
          </div>
          <div>
            <input type="radio" id="<%= field.fieldName %>False" 
                   name="<%= field.fieldName %>" value="false" <%= field.required ? 'required' : '' %>>
            <label for="<%= field.fieldName %>False">False</label>
          </div>
        <% } else if (field.fieldType === 'location') { %>
          <div>
            <label for="province_<%= fieldIndex %>">Province</label>
            <select id="province_<%= fieldIndex %>" 
                    name="<%= field.fieldName %>[province]" 
                    class="provinceSelect">
              <option value="">Select Province</option>
            </select>

            <label for="district_<%= fieldIndex %>">District</label>
            <select id="district_<%= fieldIndex %>" 
                    name="<%= field.fieldName %>[district]" 
                    class="districtSelect" disabled>
              <option value="">Select District</option>
            </select>

            <label for="municipality_<%= fieldIndex %>">Municipality</label>
            <select id="municipality_<%= fieldIndex %>" 
                    name="<%= field.fieldName %>[municipality]" 
                    class="municipalitySelect" disabled>
              <option value="">Select Municipality</option>
            </select>
          </div>
        <% } %>
      </div>
    <% }); %>

    <!-- Number of attendees -->
    <div class="field">
      <label for="attendeeCount">Number of Attendees (5b)</label>
      <input type="number" id="attendeeCount" name="attendeeCount" min="1" step="1">
    </div>

    <!-- Dynamic attendee forms -->
    <div id="attendeeForms"></div>

    <button type="submit">Submit</button>
  </form>

  <script>

// Populate provinces
function populateProvinces(provinceSelect) {
  fetch("/api/provinces")
    .then((response) => response.json())
    .then((provinces) => {
      console.log("Provinces:", provinces); // Log provinces data
      provinceSelect.innerHTML = '<option value="">Select Province</option>';
      provinces.forEach((province) => {
        const option = document.createElement("option");
        option.value = province.name; // Use 'name' if 'id' is not available
        option.textContent = province.name;
        provinceSelect.appendChild(option);
      });
      provinceSelect.disabled = false;
    })
    .catch((error) => {
      console.error("Error loading provinces:", error);
      provinceSelect.innerHTML = '<option value="">Error loading provinces</option>';
    });
}

// Handle province and district change
document.addEventListener("change", (e) => {
  // When province select changes
  if (e.target.classList.contains("provinceSelect")) {
    const field = e.target.closest(".field");
    const districtSelect = field.querySelector(".districtSelect");
    const municipalitySelect = field.querySelector(".municipalitySelect");

    districtSelect.disabled = true;
    municipalitySelect.disabled = true;
    districtSelect.innerHTML = '<option value="">Loading...</option>';
    municipalitySelect.innerHTML = '<option value="">Select Municipality</option>';

    const provinceName = e.target.options[e.target.selectedIndex]?.text.trim();

    if (!provinceName) return; // Handle empty or invalid selection

    // Fetch districts for the selected province
    fetch(/api/districts/${provinceName})
      .then((response) => {
        if (!response.ok) {
          throw new Error('Error fetching districts');
        }
        return response.json();
      })
      .then((districts) => {
        console.log("Districts for " + provinceName + ":", districts);
        districtSelect.innerHTML = '<option value="">Select District</option>';
        
        if (districts.length === 0) {
          districtSelect.innerHTML = '<option value="">No districts found</option>';
          return;
        }

        districts.forEach((district) => {
          const option = document.createElement("option");
          option.value = district.name || district.id;  // Use name or id
          option.textContent = district.name || 'Unnamed District';  // Fallback if name is missing
          districtSelect.appendChild(option);
        });
        
        districtSelect.disabled = false;
      })
      .catch((error) => {
        console.error("Error loading districts:", error);
        districtSelect.innerHTML = '<option value="">Error loading districts</option>';
      });
  } 
  // When district select changes
  else if (e.target.classList.contains("districtSelect")) {
    const field = e.target.closest(".field");
    const municipalitySelect = field.querySelector(".municipalitySelect");

    municipalitySelect.disabled = true;
    municipalitySelect.innerHTML = '<option value="">Loading...</option>';

    const districtName = e.target.options[e.target.selectedIndex]?.text.trim();

    if (!districtName) return; // Handle empty or invalid selection

    // Fetch municipalities for the selected district
    fetch(/api/municipalities/${districtName})
      .then((response) => {
        if (!response.ok) {
          throw new Error('Error fetching municipalities');
        }
        return response.json();
      })
      .then((municipalities) => {
        municipalitySelect.innerHTML = '<option value="">Select Municipality</option>';
        
        if (municipalities.length === 0) {
          municipalitySelect.innerHTML = '<option value="">No municipalities found</option>';
          return;
        }

        municipalities.forEach((municipality) => {
          const option = document.createElement("option");
          option.value = municipality.name || municipality.id;  // Use name or id
          option.textContent = municipality.name || 'Unnamed Municipality';  // Fallback if name is missing
          municipalitySelect.appendChild(option);
        });
        
        municipalitySelect.disabled = false;
      })
      .catch((error) => {
        console.error("Error loading municipalities:", error);
        municipalitySelect.innerHTML = '<option value="">Error loading municipalities</option>';
      });
  }
});

// Initialize provinces on page load
document.querySelectorAll(".provinceSelect").forEach((select) => {
  populateProvinces(select);
});

document.getElementById("attendeeCount").addEventListener("input", function () {
      const attendeeCount = parseInt(this.value, 10);
      const attendeeFormsContainer = document.getElementById("attendeeForms");

      // Clear existing forms
      attendeeFormsContainer.innerHTML = "";

      // Generate forms for each attendee
      if (!isNaN(attendeeCount) && attendeeCount > 0) {
        for (let i = 1; i <= attendeeCount; i++) {
          const formHtml = 
            <fieldset>
              <legend>Attendee ${i}</legend>
              <div>
                <label for="attendeeName_${i}">Name</label>
                <input type="text" id="attendeeName_${i}" name="attendees[${i}][name]" required>
              </div>
              <div>
                <label for="attendeeEmail_${i}">Email</label>
                <input type="email" id="attendeeEmail_${i}" name="attendees[${i}][email]" required>
              </div>
              <div>
                <label for="attendeePhone_${i}">Phone</label>
                <input type="tel" id="attendeePhone_${i}" name="attendees[${i}][phone]">
              </div>
            </fieldset>
          ;
          attendeeFormsContainer.insertAdjacentHTML("beforeend", formHtml);
        }
      }
    });

</script>
</body>
</html>