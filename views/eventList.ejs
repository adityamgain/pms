<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Event List</title>
    <link rel="stylesheet" href="/css/eventlist.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.3/dist/leaflet.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/pivottable/2.23.0/pivot.min.css">
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
</head>
<body>
    <div class="eventlist-container">
        <h1>Event List for Project: <%= project.projectName %></h1>

        <!-- Filter Toggle Button -->
        <div class="filter-toggle" onclick="toggleFilters()">
            <i class="fas fa-filter"></i> Show Filters
        </div>

        <!-- Filter Form -->
        <div id="filter-container" class="filter-container">
            <form class="filter-form" action="" method="GET">
                <div class="filter-group">
                    <label for="eventType">Event Type:</label>
                    <select name="eventType">
                        <option value="" <%= !filters.eventType ? 'selected' : '' %>>All</option>
                        <option value="Workshop" <%= filters.eventType === 'Workshop' ? 'selected' : '' %>>Workshop</option>
                        <option value="Meeting" <%= filters.eventType === 'Meeting' ? 'selected' : '' %>>Meeting</option>
                        <option value="Training" <%= filters.eventType === 'Training' ? 'selected' : '' %>>Training</option>
                        <option value="Dialogues" <%= filters.eventType === 'Dialogues' ? 'selected' : '' %>>Dialogues</option>
                        <option value="Facilities" <%= filters.eventType === 'Facilities' ? 'selected' : '' %>>Facilities</option>
                        <option value="Inputs" <%= filters.eventType === 'Inputs' ? 'selected' : '' %>>Inputs</option>
                        <option value="Infrastructures" <%= filters.eventType === 'Infrastructures' ? 'selected' : '' %>>Infrastructures</option>
                    </select>
                </div>

                <div class="filter-group">
                    <label for="nationalLevel">National Level:</label>
                    <select name="nationalLevel">
                        <option value="" <%= !filters.nationalLevel ? 'selected' : '' %>>All</option>
                        <option value="National" <%= filters.nationalLevel === 'National' ? 'selected' : '' %>>National</option>
                        <option value="Provincial" <%= filters.nationalLevel === 'Provincial' ? 'selected' : '' %>>Provincial</option>
                        <option value="District" <%= filters.nationalLevel === 'District' ? 'selected' : '' %>>District</option>
                        <option value="Municipal" <%= filters.nationalLevel === 'Municipal' ? 'selected' : '' %>>Municipal</option>
                    </select>
                </div>

                <div class="filter-group">
                    <label for="startDate">Start Date:</label>
                    <input type="date" name="startDate" value="<%= filters.startDate || '' %>">
                </div>

                <div class="filter-group">
                    <label for="endDate">End Date:</label>
                    <input type="date" name="endDate" value="<%= filters.endDate || '' %>">
                </div>

                <div class="filter-group">
                    <label for="outcome">Outcome:</label>
                    <select name="outcome">
                        <option value="" <%= !filters.outcome ? 'selected' : '' %>>All</option>
                        <% uniqueOutcomes.forEach(outcome => { %>
                            <option value="<%= outcome %>" <%= filters.outcome === outcome ? 'selected' : '' %>><%= outcome %></option>
                        <% }) %>
                    </select>
                </div>

                <div class="filter-group">
                    <label for="activity">Activity:</label>
                    <select name="activity">
                        <option value="" <%= !filters.activity ? 'selected' : '' %>>All</option>
                        <% uniqueActivities.forEach(activity => { %>
                            <option value="<%= activity %>" <%= filters.activity === activity ? 'selected' : '' %>><%= activity %></option>
                        <% }) %>
                    </select>
                </div><br><p>

                <div class="filter-group">
                    <label for="municipality">Municipality:</label>
                    <select name="municipality">
                        <option value="" <%= !filters.municipality ? 'selected' : '' %>>All</option>
                        <% uniquemunicipality.forEach(municipality => { %>
                            <option value="<%= municipality %>" <%= filters.municipality === municipality ? 'selected' : '' %>><%= municipality %></option>
                        <% }) %>
                    </select>
                </div>

                <div class="filter-group">
                    <label for="district">District:</label>
                    <select name="district">
                        <option value="" <%= !filters.district ? 'selected' : '' %>>All</option>
                        <% uniqueDistricts.forEach(district => { %>
                            <option value="<%= district %>" <%= filters.district === district ? 'selected' : '' %>><%= district %></option>
                        <% }) %>
                    </select>
                </div>

                <div class="filter-group">
                    <label for="province">Province:</label>
                    <select name="province">
                        <option value="" <%= !filters.province ? 'selected' : '' %>>All</option>
                        <% uniqueProvinces.forEach(province => { %>
                            <option value="<%= province %>" <%= filters.province === province ? 'selected' : '' %>><%= province %></option>
                        <% }) %>           
                    </select>
                </div><br>

                <div class="filter-group">
                    <label for="sort">Sort By:</label>
                    <select name="sort">
                        <option value="desc" <%= filters.sort === 'desc' ? 'selected' : '' %>>Newest First</option>
                        <option value="asc" <%= filters.sort === 'asc' ? 'selected' : '' %>>Oldest First</option>
                        <option value="highest_attendee" <%= filters.sort === 'highest_attendee' ? 'selected' : '' %>>Highest Attendee</option>
                        <option value="lowest_attendee" <%= filters.sort === 'lowest_attendee' ? 'selected' : '' %>>Lowest Attendee</option>
                    </select>
                </div>

                <div class="filter-buttons">
                    <button type="submit" class="apply-button">Apply Filters</button>
                    <button type="button" class="reset-button" onclick="resetFilters()">Reset</button>
                </div>
            </form>
        </div>

        <!-- Event List -->
        <% if (datas && datas.length > 0) { %>
            <div class="event-grid">
                <% datas.forEach((event, index) => { %>
                    <a href="/viewevent/<%= event._id %>" class="event-card">
                        <div class="event-header">
                            <h2><%= event.eventName %></h2>
                            <span class="event-type"><%= event.eventType %></span>
                        </div>
                        <div class="event-details">
                            <p><strong>Attendees:</strong> <%= overview.find(o => o.eventId.toString() === event._id.toString()).totalAttendees %></p>
                            <p><strong>Benefited Ratio:</strong> <%= overview.find(o => o.eventId.toString() === event._id.toString()).benefitedRatio %>%</p>
                            <p><strong>Venue:</strong> 
                                <%= event.venue 
                                    ? event.venue.municipality + ', ' + event.venue.district + ', ' + event.venue.province 
                                    : 'N/A' 
                                %>
                            </p>
                            <p><span class="event-type"> <%= event.startDate.toDateString() %> </span></p>
                        </div>
                    </a>
                <% }) %>
            </div>
        <% } else { %>
            <p class="no-events">No events found.</p>
        <% } %>
    </div>

            <!-- Export to Excel Button -->
        <a href="?exportToExcel=true&<%= Object.entries(filters).map(([key, value]) => `${key}=${value}`).join('&') %>&_=<%= new Date().getTime() %>" class="export-button" id="exportExcel">Export to Excel</a>
<br>

    <% if (datas && datas.length > 0) { %>
    <h5>Event Analysis Graphs</h5>
        <div class="graph-container">
            <div class="chart-container">
                <h4>Event Type</h4>
                <canvas id="eventTypeChart"></canvas>
            </div>
            <div class="chart-container">
                <h4>Gender</h4>
                <canvas id="genderChart"></canvas>
            </div>
            <div class="chart-container">
                <h4>Poverty</h4>
                <canvas id="povertyChart"></canvas>
            </div>
            <div class="chart-container">
                <h4>Caste/Ethnicity</h4>
                <canvas id="casteChart"></canvas>
            </div>   
            <div class="chart-container">
                <h4>Age Group</h4>
                <canvas id="ageGroupChart"></canvas>
            </div>                        
        </div>


        <!-- Heading for Map -->
        <h5>Event Locations Map</h5>
        <div id="map"></div>

        <!-- Heading for Pivot Table -->
        <h5>Report Table</h5>
        <div id="pivot-table" style="margin: 30px;"></div>



    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/pivottable/2.23.0/pivot.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pivottable/2.23.0/plotly_renderers.min.js"></script>
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/pivottable@2.23.0/dist/plotly_renderers.min.js"></script>

    <script src="https://unpkg.com/leaflet@1.9.3/dist/leaflet.js"></script>

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <script>
            var map = L.map('map').setView([28.3949, 84.1240], 7); // Default to Nepal

            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
            }).addTo(map);

            var eventLocations = <%- JSON.stringify(eventLocations || []) %>;

            if (eventLocations.length > 0) {
                eventLocations.forEach(event => {
                    if (event.coordinates && event.coordinates.length === 2) {
                        L.marker([event.coordinates[1], event.coordinates[0]]).addTo(map)
                            .bindPopup("<b>" + event.eventName + "</b><br>" + event.venue.municipality + ", " + event.venue.district);
                    }
                });

                var bounds = eventLocations.map(event => [event.coordinates[1], event.coordinates[0]]);
                if (bounds.length > 0) {
                    map.fitBounds(bounds);
                }
            }
        </script>
    <% } %>

    <script>
        function toggleFilters() {
            var filterContainer = document.getElementById('filter-container');
            if (filterContainer.style.display === 'none' || filterContainer.style.display === '') {
                filterContainer.style.display = 'block';
            } else {
                filterContainer.style.display = 'none';
            }
        }

        function resetFilters() {
            window.location.href = window.location.pathname; // Reload the page without query parameters
        }
    </script>

    <!-- Chart Data -->
    <script>
        const eventTypeData = <%- JSON.stringify(eventTypeCount || {}) %>;
        const genderData = <%- JSON.stringify(genderCount || {}) %>;
        const povertyData = <%- JSON.stringify(povertyStatusCount || {}) %>;
        const casteData = <%- JSON.stringify(casteCount || {}) %>;
        const ageGroupData = <%- JSON.stringify(ageGroupCount || {}) %>;

        // Event Type Chart
        const eventTypeChart = new Chart(document.getElementById('eventTypeChart'), {
            type: 'doughnut',
            data: {
                labels: Object.keys(eventTypeData),
                datasets: [{
                    data: Object.values(eventTypeData),
                    backgroundColor: ['#D3D6C2', '#b9be9d', '#9fa578', '#81875A', '#696E49', '#525639']
                }]
            },
            options: { responsive: true }
        });

        // Gender Distribution Chart
        const genderChart = new Chart(document.getElementById('genderChart'), {
            type: 'doughnut',
            data: {
                labels: Object.keys(genderData),
                datasets: [{
                    data: Object.values(genderData),
                    backgroundColor: ['#99CCFF','#FF9999'],
                }]
            },
            options: { responsive: true }
        });

        // Poverty Status Chart
        const povertyChart = new Chart(document.getElementById('povertyChart'), {
            type: 'doughnut',
            data: {
                labels: Object.keys(povertyData),
                datasets: [{
                    label: 'Beneficiaries by Poverty Status',
                    data: Object.values(povertyData),
                    backgroundColor: ['#EDDEA4', '#E4CE77', '#ffe66d']
                }]
            },
            options: { responsive: true, scales: { y: { beginAtZero: true } } }
        });

        // Caste Distribution Chart
        new Chart(document.getElementById('casteChart'), {
            type: 'doughnut',
            data: {
                labels: Object.keys(casteData),
                datasets: [{
                    label: 'Beneficiaries by Caste',
                    data: Object.values(casteData),
                    backgroundColor: ['#D8E9E5', '#A4CCC2', '#7CB6A7', '#51907F', '#3B685C', '#2ecc71']
                }]
            },
            options: { responsive: true, scales: { y: { beginAtZero: true } } }
        });

        // Age Group Distribution Chart
        new Chart(document.getElementById('ageGroupChart'), {
            type: 'doughnut',
            data: {
                labels: Object.keys(ageGroupData),
                datasets: [{
                    data: Object.values(ageGroupData),
                    backgroundColor: ['#ffcdc2', '#FF9B85', '#FF7A5C', '#FF481F'],
                }]
            },
            options: { responsive: true }
        });
    </script>

    <script>
        document.getElementById('exportExcel').addEventListener('click', function (e) {
            e.preventDefault(); // Prevent default link behavior
            const exportUrl = this.href;

            // Open the export URL in a new tab/window
            window.open(exportUrl, '_blank');

            // Optional: Show a confirmation message
            alert('Export started. Please check your downloads.');

            // Optional: Reload the page after a short delay
            setTimeout(() => {
                window.location.reload();
            }, 2000); // Reload after 2 seconds
        });

        // Update export link on filter form submission
        document.querySelector('.filter-form').addEventListener('submit', function () {
            updateExportLink();
        });

        function updateExportLink() {
            const filters = {
                eventType: document.querySelector('select[name="eventType"]').value,
                nationalLevel: document.querySelector('select[name="nationalLevel"]').value,
                startDate: document.querySelector('input[name="startDate"]').value,
                endDate: document.querySelector('input[name="endDate"]').value,
                outcome: document.querySelector('select[name="outcome"]').value,
                activity: document.querySelector('select[name="activity"]').value,
                municipality: document.querySelector('select[name="municipality"]').value,
                district: document.querySelector('select[name="district"]').value,
                province: document.querySelector('select[name="province"]').value,
                sort: document.querySelector('select[name="sort"]').value
            };

            // Remove undefined or empty parameters
            const validFilters = Object.fromEntries(
                Object.entries(filters).filter(([key, value]) => value !== undefined && value !== '')
            );

            // Construct the query string
            const queryString = Object.entries(validFilters)
                .map(([key, value]) => `${key}=${value}`)
                .join('&');

            // Update the export link
            const exportLink = document.getElementById('exportExcel');
            exportLink.href = `?exportToExcel=true&${queryString}&_=${new Date().getTime()}`;
        }

        // Initialize PivotTable.js
$(function(){
    try {
        const eventSummaryData = <%- JSON.stringify(pivotData || []) %>;

        console.log("Pivot Data (Browser):", eventSummaryData);

        if (!eventSummaryData || eventSummaryData.length <= 1) {
            console.error("No data available for PivotTable.");
            $('#pivot-table').html("<p style='color: red;'>No data available for PivotTable.</p>");
        } else {
            const dataForPivot = eventSummaryData.slice(1).map(row => {
                const obj = {};
                eventSummaryData[0].forEach((header, index) => {
                    obj[header] = row[index];
                });
                return obj;
            });

            $("#pivot-table").pivotUI(dataForPivot, {
                rows: ["Demographic Group", "Events"], // **Modified: "Demographic Group" first**
                cols: ["Type.Category"],
                aggregatorName: "Count",
                rendererName: "Table"
            });
        }
    } catch (error) {
        console.error("Error initializing PivotTable:", error);
        $('#pivot-table').html("<p style='color: red;'>Error initializing PivotTable. Please check console.</p>");
    }
});        


</script>
</body>
</html>